/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[2,3],$V2=[1,8],$V3=[1,16],$V4=[1,15],$V5=[1,21],$V6=[5,9,12,14,19,20],$V7=[5,9,12];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"PROGRAMA":4,"ID":5,";":6,"INICIO":7,"listaInstr":8,"FIN":9,".":10,"instr":11,"SI":12,"cond":13,"ENTONCES":14,"bloque":15,":":16,"=":17,"expr":18,">":19,"+":20,"term":21,"NUM":22,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAMA",5:"ID",6:";",7:"INICIO",9:"FIN",10:".",12:"SI",14:"ENTONCES",16:":",17:"=",19:">",20:"+",22:"NUM"},
productions_: [0,[3,7],[8,2],[8,0],[11,4],[11,4],[15,3],[15,1],[13,3],[18,3],[18,1],[21,1],[21,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
var i;
switch (yystate) {
case 1:

    imprimeTablaSim();
    console.log('Tabla de códigos');
    imprimeTablaCod();
    console.log('Interpreta código');
    interpretaCodigo();
    imprimeTablaSim();
  
break;
case 4:
    const cond = '';
    i = cx;
    generaCodigo('SALTARF', cond, '?', '-');
    this.$ = i;
    tablaCod[$$[$0-1]].a2 = cx + 1;
  
break;
case 5:

    generaCodigo('ASIGNAR', $$[$0-3], $$[$0-1], '-');
    this.$ = $$[$0-3];
  
break;
case 8:

    i = GenVarTemp();
    generaCodigo('MAYOR', i, $$[$0-2], $$[$0]);
    this.$ = i;
  
break;
case 9:

    i = GenVarTemp();
    generaCodigo('SUMAR', i, $$[$0-2], $$[$0]);
    this.$ = i;
  
break;
case 11:

    this.$ = localizaSimb(lexema, 'NUM');
  
break;
case 12:

    this.$ = localizaSimb(lexema, 'ID');
  
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:[1,5]},{5:$V0,8:6,9:$V1,11:7,12:$V2},{9:[1,10]},{5:$V0,8:11,9:$V1,11:7,12:$V2},{5:$V3,13:12,18:13,21:14,22:$V4},{16:[1,17]},{10:[1,18]},{9:[2,2]},{14:[1,19]},{19:[1,20],20:$V5},o($V6,[2,10]),o($V6,[2,11]),o($V6,[2,12]),{17:[1,22]},{1:[2,1]},{5:$V0,7:[1,24],11:25,12:$V2,15:23},{5:$V3,18:26,21:14,22:$V4},{5:$V3,21:27,22:$V4},{5:$V3,18:28,21:14,22:$V4},o($V7,[2,4]),{5:$V0,8:29,9:$V1,11:7,12:$V2},o($V7,[2,7]),{14:[2,8],20:$V5},o($V6,[2,9]),o($V7,[2,5],{20:$V5}),{9:[1,30]},o($V7,[2,6])],
defaultActions: {11:[2,2],18:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

const tablaSim = [];
let nSim = 0;
const tablaCod = [];
let cx = -1;
let nVarTemp = 0;
let lexema = '';

function yyerror(msg) {
  console.log('Error: ' + msg);
}

function generaCodigo(op, a1, a2, a3) {
  cx++;
  tablaCod[cx] = { op, a1, a2, a3 };
}

function localizaSimb(nom, tok) {
  for (let i = 0; i < nSim; i++) {
    if (tablaSim[i].nombre === nom) {
      return i;
    }
  }

  tablaSim[nSim] = { nombre: nom, token: tok };
  if (tok === 'ID') {
    tablaSim[nSim].valor = 0.0;
  }
  if (tok === 'NUM') {
    tablaSim[nSim].valor = parseFloat(nom);
  }
  nSim++;

  return nSim - 1;
}

function imprimeTablaSim() {
  for (let i = 0; i < nSim; i++) {
    console.log(i + ' nombre=' + tablaSim[i].nombre + ' tok=' + tablaSim[i].token + ' valor=' + tablaSim[i].valor);
  }
}

function imprimeTablaCod() {
  for (let i = 0; i <= cx; i++) {
    console.log(i + ' op=' + tablaCod[i].op + ' a1=' + tablaCod[i].a1 + ' a2=' + tablaCod[i].a2 + ' a3=' + tablaCod[i].a3);
  }
}

function interpretaCodigo() {
  for (let i = 0; i <= cx; i++) {
    const { op, a1, a2, a3 } = tablaCod[i];
    if (op === 'ASIGNAR') {
      tablaSim[a1].valor = tablaSim[a2].valor;
    }
    if (op === 'SUMAR') {
      tablaSim[a1].valor = tablaSim[a2].valor + tablaSim[a3].valor;
    }
    if (op === 'MAYOR') {
      tablaSim[a1].valor = tablaSim[a2].valor > tablaSim[a3].valor ? 1 : 0;
    }
    if (op === 'SALTARF') {
      if (tablaSim[a1].valor === 0) {
        i = a2 - 1;
      }
    }
  }
}

function esPalabraReservada(lexema) {
  switch (lexema.toUpperCase()) {
    case 'PROGRAMA':
      return 'PROGRAMA';
    case 'INICIO':
      return 'INICIO';
    case 'FIN':
      return 'FIN';
    case 'NUM':
      return 'NUM';
    case 'ASIGNAR':
      return 'ASIGNAR';
    case 'SUMAR':
      return 'SUMAR';
    case 'SI':
      return 'SI';
    case 'ENTONCES':
      return 'ENTONCES';
    default:
      return 'ID';
  }
}


function GenVarTemp() {
  const t = '_T' + nVarTemp++;
  return localizaSimb(t, 'ID');
}

function yylex() {
  let c = '';
  let i = 0;

  while (true) {
    c = getchar();
    if (c === ' ') continue;
    if (c === '\t') continue;
    if (c === '\n') continue;

    if (isDigit(c)) {
      i = 0;
      do {
        lexema += c;
        c = getchar();
      } while (isDigit(c));
      ungetc(c);
      return 'NUM';
    }

    if (isAlpha(c)) {
      i = 0;
      do {
        lexema += c;
        c = getchar();
      } while (isAlnum(c));
      ungetc(c);
      return esPalabraReservada(lexema);
    }

    return c;
  }
}

// Simula getchar() en el entorno de ejecución
function getchar() {
  const input = 'PROGRAMA id ; INICIO SI 2 > 1 ENTONCES INICIO id : = 10 + 5 FIN FIN .';
  getchar.pos = getchar.pos || 0;
  if (getchar.pos < input.length) {
    return input[getchar.pos++];
  }
  return '';
}

function ungetc() {
  getchar.pos--;
}

function isDigit(c) {
  return /\d/.test(c);
}

function isAlpha(c) {
  return /[a-z]/i.test(c);
}

function isAlnum(c) {
  return isDigit(c) || isAlpha(c);
}

const input = 'PROGRAMA id ; INICIO SI 2 > 1 ENTONCES INICIO id : = 10 + 5 FIN FIN .';
const result = yyparse(input);

console.log(result === 0 ? 'Cadena válida' : 'Cadena inválida');

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser();
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}